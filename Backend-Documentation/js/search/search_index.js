var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ChatMessage.html",[0,0.298,1,1.434]],["body/interfaces/ChatMessage.html",[0,0.43,1,2.469,2,1.31,3,0.67,4,0.67,5,0.546,6,2.954,7,0.324,8,1.336,9,3.886,10,3.224,11,1.531,12,0.512,13,0.057,14,0.806,15,0.05,16,0.05]],["title/interfaces/IModelUser.html",[0,0.298,17,1.226]],["body/interfaces/IModelUser.html",[0,0.324,2,0.662,3,0.339,4,0.339,5,0.276,7,0.163,11,1.534,12,0.522,13,0.061,14,0.803,15,0.032,16,0.032,17,1.594,18,1.048,19,2.201,20,2.064,21,1.146,22,2.796,23,2.222,24,2.396,25,0.77,26,1.879,27,1.238,28,1.238,29,1.238,30,2.207,31,0.77,32,2.654,33,0.803,34,1.843,35,1.864,36,1.194,37,1.048,38,1.56,39,1.048,40,0.896,41,0.985,42,0.77,43,1.56,44,1.56,45,1.334,46,1.56,47,1.56,48,1.843,49,1.843,50,1.304,51,1.048,52,1.621,53,1.493,54,1.493,55,1.135,56,1.56,57,0.49,58,2.313,59,2.462,60,2.462,61,1.641,62,2.064,63,1.238,64,1.048,65,1.048,66,1.334,67,1.048,68,2.222,69,1.56,70,1.146,71,2.222,72,2.222,73,0.896,74,1.493,75,2.064,76,1.493,77,1.135,78,1.843,79,2.222,80,2.207,81,2.222,82,2.222,83,2.222,84,1.843,85,0.77,86,1.493,87,1.177,88,1.177,89,1.493,90,1.493,91,1.493,92,0.896,93,1.493,94,1.493,95,1.238,96,1.493,97,0.77,98,1.334,99,2.222,100,1.843,101,1.493,102,2.222,103,1.493,104,1.493,105,1.238]],["title/interfaces/IProduct.html",[0,0.298,106,1.434]],["body/interfaces/IProduct.html",[0,0.317,2,0.963,3,0.493,4,0.493,5,0.401,7,0.238,8,1.101,11,1.467,12,0.584,13,0.06,14,0.889,15,0.041,16,0.041,19,2.402,20,2.288,33,0.593,34,2.702,35,2.288,36,0.826,37,1.525,45,2.087,55,0.937,57,0.401,58,2.034,59,2.034,60,2.44,61,1.685,62,2.034,66,2.174,67,1.525,69,2.034,70,1.121,73,2.174,77,0.937,106,2.034,107,1.802,108,3.003,109,3.003,110,3.003,111,3.003,112,3.861,113,3.475,114,2.402,115,2.172]],["title/interfaces/IUser.html",[0,0.298,42,1.054]],["body/interfaces/IUser.html",[0,0.306,2,0.613,3,0.314,4,0.314,5,0.255,7,0.151,8,0.797,11,1.55,12,0.572,13,0.061,14,0.772,15,0.03,16,0.03,17,1.259,18,0.97,19,2.102,20,1.779,23,1.382,24,2.405,30,2.335,32,2.097,33,0.772,34,2.102,35,1.779,36,1.155,37,0.97,38,1.472,39,0.97,40,0.83,41,0.93,42,1.082,43,2.135,44,2.135,45,1.698,46,2.135,47,2.135,48,2.522,49,2.522,50,1.254,51,0.97,52,1.569,53,2.828,54,2.828,55,1.109,56,1.472,57,0.468,58,2.247,59,2.405,60,2.405,61,1.612,62,1.986,63,1.146,64,0.97,65,0.97,66,1.259,67,0.97,68,2.097,69,1.472,70,1.082,71,2.097,72,2.097,73,0.83,74,1.382,75,2.405,76,1.382,77,1.109,78,1.739,79,2.097,80,2.135,81,2.097,82,2.097,83,2.097,84,1.739,85,0.713,86,1.382,87,1.123,88,1.123,89,1.382,90,1.382,91,1.382,92,0.83,93,1.382,94,1.382,95,1.146,96,1.382,97,0.713,98,1.259,99,2.097,100,1.739,101,1.382,102,2.097,103,1.382,104,1.382,105,1.146,116,2.639]],["title/interfaces/JwtPayload.html",[0,0.298,117,1.226]],["body/interfaces/JwtPayload.html",[0,0.429,2,0.988,3,0.505,4,0.505,5,0.411,7,0.244,8,1.119,11,1.334,12,0.325,13,0.061,14,0.608,15,0.042,16,0.042,33,0.958,36,1.334,39,1.564,40,1.337,41,1.306,42,1.519,50,1.618,51,2.316,52,1.811,55,1.181,57,0.544,77,1.181,85,1.519,87,0.988,88,0.988,92,1.337,97,1.149,98,1.768,117,1.981,118,1.564,119,2.068,120,1.463,121,1.768,122,1.119,123,1.847,124,2.227,125,2.227,126,2.227,127,1.149,128,1.337,129,1.337,130,1.337,131,2.442,132,1.847,133,1.847,134,1.847,135,1.564,136,1.847,137,1.847,138,1.847,139,1.847,140,1.847,141,1.564,142,1.847,143,1.337,144,1.847,145,1.847,146,1.847]],["title/classes/ProductController.html",[147,0.463,148,1.434]],["body/classes/ProductController.html",[3,0.266,4,0.266,5,0.216,7,0.128,11,0.445,12,0.411,13,0.061,14,0.32,15,0.037,16,0.026,21,0.952,25,1.454,27,2.337,28,2.337,29,2.337,31,1.454,33,0.504,36,1.071,50,1.148,55,1.081,57,0.216,61,0.818,64,1.296,65,1.603,66,1.108,70,1.616,73,1.692,75,1.819,77,0.597,80,1.978,87,1.674,88,1.389,106,1.819,108,0.972,109,0.972,110,0.972,111,1.53,120,1.647,121,2.231,122,0.445,128,1.692,129,2.209,130,1.692,143,1.692,147,0.266,148,1.296,149,0.604,150,1.171,151,2.209,152,2.322,153,2.322,154,2.322,155,2.322,156,2.322,157,2.322,158,1.474,159,2.322,160,1.474,161,2.322,162,1.474,163,2.322,164,1.474,165,2.322,166,1.474,167,1.171,168,1.474,169,1.474,170,1.474,171,2.992,172,1.474,173,3.543,174,2.283,175,2.283,176,1.474,177,1.171,178,2.817,179,2.283,180,1.474,181,1.171,182,1.171,183,1.845,184,3.546,185,2.873,186,2.873,187,2.873,188,2.873,189,2.873,190,2.873,191,1.845,192,1.845,193,1.171,194,1.171,195,1.845,196,1.171,197,1.171,198,2.283,199,1.171,200,3.26,201,2.322,202,3.26,203,1.845,204,1.845,205,2.59,206,1.845,207,1.474,208,2.322,209,3.767,210,2.322,211,2.322,212,2.322,213,2.322,214,2.322,215,1.171,216,1.474,217,2.873,218,1.474,219,1.474,220,1.474,221,1.474,222,1.474,223,1.474,224,1.474,225,2.322,226,2.322,227,1.474,228,1.474]],["title/classes/ProductRoutes.html",[147,0.463,229,1.434]],["body/classes/ProductRoutes.html",[3,0.561,4,0.561,5,0.456,7,0.271,8,1.197,12,0.459,13,0.06,14,0.675,15,0.045,16,0.045,21,1.625,25,1.884,31,1.275,33,0.947,57,0.582,122,0.939,127,1.946,147,0.561,148,2.786,149,1.275,151,2.083,229,2.212,230,2.471,231,3.919,232,3.029,233,2.877,234,3.965,235,1.735,236,1.484,237,3.111,238,3.111,239,2.05,240,3.111,241,2.471,242,2.471,243,2.05,244,3.111,245,3.111,246,3.111,247,3.111,248,3.111,249,3.111,250,3.111,251,3.111,252,3.111,253,3.111]],["title/interfaces/Request.html",[0,0.298,120,0.906]],["body/interfaces/Request.html",[0,0.427,2,0.981,3,0.502,4,0.502,5,0.409,7,0.242,8,1.114,11,1.33,12,0.427,13,0.061,14,0.604,15,0.042,16,0.042,33,0.956,36,1.33,39,1.553,40,1.328,41,1.3,42,1.806,50,1.3,51,1.553,52,1.97,55,1.179,57,0.541,77,1.255,85,1.512,87,0.981,88,0.981,92,1.328,97,1.141,98,1.76,117,1.76,118,1.553,119,2.058,120,1.552,121,1.76,122,1.114,123,1.835,124,2.212,125,2.212,126,2.212,127,1.141,128,1.328,129,1.328,130,1.328,131,2.431,132,1.835,133,1.835,134,1.835,135,1.553,136,1.835,137,1.835,138,1.835,139,1.835,140,1.835,141,1.553,142,1.835,143,1.328,144,1.835,145,1.835,146,1.835]],["title/classes/Server.html",[147,0.463,254,1.434]],["body/classes/Server.html",[1,1.667,3,0.371,4,0.371,5,0.302,7,0.179,8,0.902,9,1.633,10,1.969,12,0.447,13,0.061,15,0.034,16,0.034,21,1.443,25,1.892,31,1.584,33,1.03,41,1.509,45,0.981,55,0.529,57,0.567,61,1.053,122,1.063,147,0.371,149,0.843,151,2.388,229,1.147,232,2.547,233,2.32,235,1.147,236,0.981,239,2.913,243,1.355,254,2.575,255,1.355,256,3.52,257,4.283,258,3.864,259,3.52,260,3.864,261,3.864,262,2.988,263,2.988,264,2.056,265,3.52,266,2.056,267,2.374,268,3.52,269,2.056,270,2.056,271,2.056,272,2.056,273,2.056,274,2.056,275,2.056,276,2.797,277,2.374,278,3.52,279,1.633,280,1.633,281,2.056,282,2.056,283,1.969,284,2.056,285,1.147,286,2.056,287,2.056,288,2.056,289,2.056,290,2.056,291,2.056,292,2.056,293,2.056,294,2.988,295,2.056,296,2.056,297,2.056,298,2.056,299,2.056,300,2.056,301,2.056,302,2.056,303,2.056,304,2.056,305,2.056,306,2.056,307,2.056,308,2.056,309,1.633,310,2.056,311,2.056,312,3.52,313,2.056,314,2.056,315,2.056,316,2.988,317,2.056,318,2.056,319,2.056,320,2.056,321,2.056,322,2.056,323,2.056,324,2.056,325,1.633,326,2.988,327,2.056,328,2.988,329,2.056,330,2.056,331,2.056,332,2.056,333,2.056,334,2.056,335,2.056]],["title/classes/UserController.html",[147,0.463,336,1.434]],["body/classes/UserController.html",[3,0.323,4,0.323,5,0.263,7,0.156,12,0.449,13,0.061,14,0.388,15,0.041,16,0.031,21,1.106,24,0.999,25,1.589,27,2.554,28,2.554,29,2.554,30,1.505,31,1.589,33,0.704,36,0.814,38,1.505,43,0.999,44,0.999,46,0.999,47,0.999,50,0.631,52,1.481,55,1.087,57,0.263,61,0.631,75,0.999,77,1.166,78,1.18,80,1.811,84,1.18,85,1.67,87,1.718,88,1.598,95,1.18,97,0.734,119,2.358,120,1.707,121,2.312,122,0.541,123,1.18,128,1.849,129,2.294,130,1.724,135,0.999,141,0.999,143,1.724,147,0.323,149,0.734,151,2.294,167,1.422,171,1.422,173,3.079,174,1.422,175,1.422,177,1.422,178,2.87,179,2.578,181,1.422,182,1.422,183,1.422,191,1.422,192,2.143,193,1.422,194,1.422,195,2.143,196,1.422,197,1.422,198,2.143,199,1.422,203,1.422,204,1.422,205,1.422,206,2.578,215,1.422,336,1.505,337,1.422,338,2.697,339,2.697,340,2.697,341,2.697,342,2.697,343,2.697,344,1.79,345,2.697,346,1.79,347,2.697,348,1.79,349,2.697,350,1.79,351,2.697,352,1.79,353,1.79,354,1.79,355,2.697,356,1.79,357,2.697,358,1.79,359,2.697,360,1.79,361,1.79,362,1.79,363,1.79,364,3.245,365,1.79,366,1.79,367,1.79,368,1.79,369,1.79,370,1.79,371,2.697,372,1.79,373,1.79,374,1.79,375,1.79]],["title/classes/UserRoutes.html",[147,0.463,285,1.434]],["body/classes/UserRoutes.html",[3,0.555,4,0.555,5,0.452,7,0.268,8,1.19,12,0.456,13,0.06,14,0.668,15,0.045,16,0.045,21,1.615,25,1.877,31,1.262,33,0.942,57,0.578,100,2.029,122,0.93,127,1.877,147,0.555,149,1.262,151,2.073,231,3.959,232,3.018,233,2.863,235,1.718,236,1.469,239,2.029,241,2.446,242,2.446,243,2.029,285,2.198,336,2.78,376,2.446,377,3.94,378,3.079,379,3.079,380,3.079,381,3.079,382,3.079,383,3.079,384,3.079,385,3.079,386,3.079,387,3.079,388,3.079,389,3.079,390,3.079,391,3.079,392,3.079,393,3.079]],["title/coverage.html",[394,2.778]],["body/coverage.html",[0,0.541,1,1.515,5,0.399,6,2.157,12,0.314,13,0.06,15,0.041,16,0.041,17,1.296,18,2.434,41,0.957,42,1.113,56,1.515,57,0.399,70,1.113,77,0.698,106,1.515,107,2.693,114,1.79,117,1.296,118,2.28,120,0.957,127,1.113,147,0.82,148,1.515,150,2.157,229,1.515,230,2.157,254,2.28,255,2.391,267,4.167,283,1.79,285,1.515,336,1.515,337,2.157,376,2.157,394,2.157,395,2.716,396,2.716,397,2.716,398,3.629,399,3.716,400,4.029,401,5.072,402,2.157,403,2.157,404,2.157,405,2.157,406,3.629,407,2.157,408,3.629,409,2.716,410,2.716,411,3.629,412,2.716,413,2.716,414,2.716]],["title/dependencies.html",[415,2.152,416,2.453]],["body/dependencies.html",[13,0.059,15,0.051,16,0.051,37,2.119,38,2.119,40,1.813,122,1.147,276,3.018,277,3.018,279,3.018,416,3.018,417,3.799,418,3.799,419,3.799,420,3.799,421,3.799,422,3.799,423,3.799,424,3.799,425,3.799]],["title/miscellaneous/enumerations.html",[426,1.2,427,2.453]],["body/miscellaneous/enumerations.html",[7,0.337,10,2.987,13,0.057,15,0.051,16,0.051,236,2.293,280,3.601,426,2.16,427,3.076,428,3.871,429,3.871,430,3.871,431,3.076,432,4.533]],["title/index.html",[7,0.224,433,2.042]],["body/index.html",[2,1.427,13,0.053,15,0.053,16,0.053,149,1.661,433,3.219,434,4.052,435,4.052]],["title/modules.html",[436,2.778]],["body/modules.html",[13,0.053,15,0.053,16,0.053,436,3.262]],["title/miscellaneous/variables.html",[426,1.2,437,2.453]],["body/miscellaneous/variables.html",[7,0.137,11,1.324,12,0.563,13,0.061,15,0.028,16,0.028,17,0.753,18,0.88,20,0.88,24,0.88,30,0.88,35,1.887,36,1.296,41,0.863,43,0.88,44,0.88,45,1.168,46,0.88,47,0.88,48,1.039,49,1.039,50,0.556,52,1.386,55,0.996,56,1.674,57,0.537,58,2.331,59,2.53,60,2.53,61,1.759,62,2.162,63,1.039,64,0.88,65,0.88,66,1.168,67,1.366,69,1.366,70,1.004,73,0.753,77,1.04,85,1.004,87,0.863,88,0.863,92,0.753,97,0.647,98,1.168,105,1.039,107,1.039,108,1.039,109,1.039,110,1.039,111,1.039,112,1.945,113,1.253,114,1.977,115,1.253,117,0.753,118,0.88,119,0.88,120,0.556,121,0.753,127,1.004,128,0.753,129,0.753,130,1.168,131,1.613,132,1.039,133,1.039,134,1.039,135,0.88,136,1.039,137,1.039,138,1.039,139,1.039,140,1.039,141,0.88,142,1.039,143,1.168,144,1.039,145,1.039,146,1.039,235,2.564,236,2.192,254,2.255,255,1.039,283,2.229,309,1.253,325,1.253,399,1.253,400,1.253,402,2.687,403,2.909,404,2.384,405,2.384,407,1.253,426,0.88,431,3.212,437,1.253,438,1.577,439,3.874,440,1.577,441,2.448,442,1.577,443,2.448,444,2.448,445,1.577,446,1.577,447,1.577,448,1.577,449,1.577,450,1.577,451,1.577,452,1.577,453,3.382,454,1.577,455,1.577,456,1.577,457,1.577,458,1.577,459,1.577,460,1.577,461,3.661,462,1.577,463,1.577,464,1.577,465,1.577,466,1.577,467,1.577,468,1.577,469,2.448,470,2.448,471,2.448,472,2.448,473,2.448,474,2.448,475,1.577,476,1.577,477,1.577,478,1.577,479,1.577,480,2.448,481,1.577]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"interfaces/ChatMessage.html":{},"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"classes/ProductRoutes.html":{},"interfaces/Request.html":{},"classes/Server.html":{},"classes/UserController.html":{},"classes/UserRoutes.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":267,"title":{},"body":{"classes/Server.html":{},"coverage.html":{}}}],["0/1",{"_index":401,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":412,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":410,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":408,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":398,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":411,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":406,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":409,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":225,"title":{},"body":{"classes/ProductController.html":{}}}],["1.7.4",{"_index":418,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":419,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":304,"title":{},"body":{"classes/Server.html":{}}}],["3000",{"_index":453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.17.2",{"_index":420,"title":{},"body":{"dependencies.html":{}}}],["4.4.1",{"_index":423,"title":{},"body":{"dependencies.html":{}}}],["4.5.4",{"_index":425,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":434,"title":{},"body":{"index.html":{}}}],["5.0.1",{"_index":417,"title":{},"body":{"dependencies.html":{}}}],["5.11.6",{"_index":422,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":435,"title":{},"body":{"index.html":{}}}],["8.5.1",{"_index":421,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":50,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"interfaces/Request.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["admin",{"_index":64,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"classes/ProductController.html":{},"miscellaneous/variables.html":{}}}],["allowedupdates",{"_index":194,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["allowedupdates.includes(update",{"_index":197,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["already",{"_index":181,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["app",{"_index":256,"title":{},"body":{"classes/Server.html":{}}}],["async",{"_index":87,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"interfaces/Request.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":127,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/ProductRoutes.html":{},"interfaces/Request.html":{},"classes/UserRoutes.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authenticate",{"_index":146,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"miscellaneous/variables.html":{}}}],["authenticateuser",{"_index":338,"title":{},"body":{"classes/UserController.html":{}}}],["authenticateuser(req",{"_index":343,"title":{},"body":{"classes/UserController.html":{}}}],["author",{"_index":9,"title":{},"body":{"interfaces/ChatMessage.html":{},"classes/Server.html":{}}}],["autoreconnect",{"_index":470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["await",{"_index":88,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"interfaces/Request.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":38,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"classes/UserController.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":103,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["bcrypt.gensalt(10",{"_index":78,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"classes/UserController.html":{}}}],["bcrypt.hash(req.body.password",{"_index":374,"title":{},"body":{"classes/UserController.html":{}}}],["bcrypt.hash(this.password",{"_index":82,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["buffer",{"_index":113,"title":{},"body":{"interfaces/IProduct.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":143,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"interfaces/Request.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["chat/chatmessage",{"_index":282,"title":{},"body":{"classes/Server.html":{}}}],["chat/constant",{"_index":281,"title":{},"body":{"classes/Server.html":{}}}],["chatevent",{"_index":280,"title":{},"body":{"classes/Server.html":{},"miscellaneous/enumerations.html":{}}}],["chatmessage",{"_index":1,"title":{"interfaces/ChatMessage.html":{}},"body":{"interfaces/ChatMessage.html":{},"classes/Server.html":{},"coverage.html":{}}}],["city",{"_index":46,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["class",{"_index":147,"title":{"classes/ProductController.html":{},"classes/ProductRoutes.html":{},"classes/Server.html":{},"classes/UserController.html":{},"classes/UserRoutes.html":{}},"body":{"classes/ProductController.html":{},"classes/ProductRoutes.html":{},"classes/Server.html":{},"classes/UserController.html":{},"classes/UserRoutes.html":{},"coverage.html":{}}}],["classes",{"_index":149,"title":{},"body":{"classes/ProductController.html":{},"classes/ProductRoutes.html":{},"classes/Server.html":{},"classes/UserController.html":{},"classes/UserRoutes.html":{},"index.html":{}}}],["client",{"_index":308,"title":{},"body":{"classes/Server.html":{}}}],["closed",{"_index":478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compression",{"_index":277,"title":{},"body":{"classes/Server.html":{},"dependencies.html":{}}}],["config",{"_index":41,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"classes/Server.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["config.server.hostname}:${config.server.port",{"_index":334,"title":{},"body":{"classes/Server.html":{}}}],["config.server.jwt_secret",{"_index":92,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"miscellaneous/variables.html":{}}}],["config.server.mongodb_uri",{"_index":454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connect",{"_index":430,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["connection",{"_index":431,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["connection.on(\"close",{"_index":477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection.on(\"connected",{"_index":460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection.on(\"disconnected",{"_index":465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection.on(\"error",{"_index":479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection.on(\"reconnected",{"_index":463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connections",{"_index":315,"title":{},"body":{"classes/Server.html":{}}}],["connecttimeoutms",{"_index":476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.error(error",{"_index":481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"create",{"_index":169,"title":{},"body":{"classes/ProductController.html":{}}}],["console.log(\"customer",{"_index":228,"title":{},"body":{"classes/ProductController.html":{}}}],["console.log(\"deleted",{"_index":211,"title":{},"body":{"classes/ProductController.html":{}}}],["console.log(\"get",{"_index":183,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["console.log(\"here",{"_index":360,"title":{},"body":{"classes/UserController.html":{}}}],["console.log(\"login",{"_index":362,"title":{},"body":{"classes/UserController.html":{}}}],["console.log(\"logout",{"_index":365,"title":{},"body":{"classes/UserController.html":{}}}],["console.log(\"mongo",{"_index":461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"no",{"_index":455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"number",{"_index":313,"title":{},"body":{"classes/Server.html":{}}}],["console.log(\"register",{"_index":353,"title":{},"body":{"classes/UserController.html":{}}}],["console.log(\"router",{"_index":381,"title":{},"body":{"classes/UserRoutes.html":{}}}],["console.log(\"staff",{"_index":227,"title":{},"body":{"classes/ProductController.html":{}}}],["console.log(\"trying",{"_index":466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"update",{"_index":373,"title":{},"body":{"classes/UserController.html":{}}}],["console.log('[server](message",{"_index":318,"title":{},"body":{"classes/Server.html":{}}}],["console.log('client",{"_index":324,"title":{},"body":{"classes/Server.html":{}}}],["console.log('connected",{"_index":306,"title":{},"body":{"classes/Server.html":{}}}],["console.log('received",{"_index":327,"title":{},"body":{"classes/Server.html":{}}}],["console.log(`server",{"_index":332,"title":{},"body":{"classes/Server.html":{}}}],["console.log(decoded",{"_index":138,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"miscellaneous/variables.html":{}}}],["console.log(e",{"_index":215,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["console.log(err",{"_index":205,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["console.log(header",{"_index":133,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"miscellaneous/variables.html":{}}}],["console.log(req.body",{"_index":355,"title":{},"body":{"classes/UserController.html":{}}}],["console.log(req.query._id",{"_index":207,"title":{},"body":{"classes/ProductController.html":{}}}],["console.log(req.token",{"_index":366,"title":{},"body":{"classes/UserController.html":{}}}],["console.log(req.user",{"_index":216,"title":{},"body":{"classes/ProductController.html":{}}}],["console.log(token",{"_index":135,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["console.log(user",{"_index":357,"title":{},"body":{"classes/UserController.html":{}}}],["const",{"_index":55,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"interfaces/Request.html":{},"classes/Server.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":233,"title":{},"body":{"classes/ProductRoutes.html":{},"classes/Server.html":{},"classes/UserRoutes.html":{}}}],["controllers/productcontroller",{"_index":240,"title":{},"body":{"classes/ProductRoutes.html":{}}}],["controllers/usercontroller",{"_index":380,"title":{},"body":{"classes/UserRoutes.html":{}}}],["cors",{"_index":276,"title":{},"body":{"classes/Server.html":{},"dependencies.html":{}}}],["coverage",{"_index":394,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createproduct",{"_index":152,"title":{},"body":{"classes/ProductController.html":{}}}],["createproduct(req",{"_index":157,"title":{},"body":{"classes/ProductController.html":{}}}],["createserver",{"_index":274,"title":{},"body":{"classes/Server.html":{}}}],["createserver(this.app",{"_index":290,"title":{},"body":{"classes/Server.html":{}}}],["creator",{"_index":73,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"classes/ProductController.html":{},"miscellaneous/variables.html":{}}}],["credentials",{"_index":302,"title":{},"body":{"classes/Server.html":{}}}],["customer",{"_index":66,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"classes/ProductController.html":{},"miscellaneous/variables.html":{}}}],["db/mongoose",{"_index":284,"title":{},"body":{"classes/Server.html":{}}}],["declare",{"_index":124,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Request.html":{}}}],["decoded",{"_index":136,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"miscellaneous/variables.html":{}}}],["decoded._id",{"_index":139,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"miscellaneous/variables.html":{}}}],["default",{"_index":235,"title":{},"body":{"classes/ProductRoutes.html":{},"classes/Server.html":{},"classes/UserRoutes.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":25,"title":{},"body":{"interfaces/IModelUser.html":{},"classes/ProductController.html":{},"classes/ProductRoutes.html":{},"classes/Server.html":{},"classes/UserController.html":{},"classes/UserRoutes.html":{}}}],["deleted",{"_index":213,"title":{},"body":{"classes/ProductController.html":{}}}],["deleteproduct",{"_index":153,"title":{},"body":{"classes/ProductController.html":{}}}],["deleteproduct(req",{"_index":159,"title":{},"body":{"classes/ProductController.html":{}}}],["dependencies",{"_index":416,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["desc",{"_index":224,"title":{},"body":{"classes/ProductController.html":{}}}],["description",{"_index":108,"title":{},"body":{"interfaces/IProduct.html":{},"classes/ProductController.html":{},"miscellaneous/variables.html":{}}}],["disconnect",{"_index":432,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["disconnected",{"_index":325,"title":{},"body":{"classes/Server.html":{},"miscellaneous/variables.html":{}}}],["doc",{"_index":204,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["docs",{"_index":209,"title":{},"body":{"classes/ProductController.html":{}}}],["document",{"_index":34,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{}}}],["documentation",{"_index":395,"title":{},"body":{"coverage.html":{}}}],["e",{"_index":178,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["email",{"_index":30,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":63,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["enumerations",{"_index":427,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err",{"_index":173,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["error",{"_index":36,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"interfaces/Request.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["error('unable",{"_index":99,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["established",{"_index":462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exists",{"_index":182,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["export",{"_index":14,"title":{},"body":{"interfaces/ChatMessage.html":{},"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"classes/ProductRoutes.html":{},"interfaces/Request.html":{},"classes/UserController.html":{},"classes/UserRoutes.html":{}}}],["express",{"_index":122,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"classes/ProductRoutes.html":{},"interfaces/Request.html":{},"classes/Server.html":{},"classes/UserController.html":{},"classes/UserRoutes.html":{},"dependencies.html":{}}}],["express.application",{"_index":263,"title":{},"body":{"classes/Server.html":{}}}],["extended",{"_index":300,"title":{},"body":{"classes/Server.html":{}}}],["extends",{"_index":19,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{}}}],["false",{"_index":59,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ChatMessage.html":{},"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"classes/ProductRoutes.html":{},"interfaces/Request.html":{},"classes/Server.html":{},"classes/UserController.html":{},"classes/UserRoutes.html":{},"coverage.html":{}}}],["findbycredentials",{"_index":22,"title":{},"body":{"interfaces/IModelUser.html":{}}}],["findbycredentials(email",{"_index":23,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["foreignfield",{"_index":72,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["found",{"_index":101,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["function",{"_index":75,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"classes/ProductController.html":{},"classes/UserController.html":{}}}],["generateauthtoken",{"_index":53,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["getproductlist",{"_index":154,"title":{},"body":{"classes/ProductController.html":{}}}],["getproductlist(req",{"_index":161,"title":{},"body":{"classes/ProductController.html":{}}}],["getproducts",{"_index":155,"title":{},"body":{"classes/ProductController.html":{}}}],["getproducts(req",{"_index":163,"title":{},"body":{"classes/ProductController.html":{}}}],["getuser",{"_index":339,"title":{},"body":{"classes/UserController.html":{}}}],["getuser(req",{"_index":345,"title":{},"body":{"classes/UserController.html":{}}}],["global",{"_index":125,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Request.html":{}}}],["hash",{"_index":83,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["hashpassword",{"_index":54,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["header",{"_index":131,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"miscellaneous/variables.html":{}}}],["header.replace('bearer",{"_index":134,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"miscellaneous/variables.html":{}}}],["hostname",{"_index":449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":275,"title":{},"body":{"classes/Server.html":{}}}],["httpserver",{"_index":268,"title":{},"body":{"classes/Server.html":{}}}],["identifier",{"_index":396,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":109,"title":{},"body":{"interfaces/IProduct.html":{},"classes/ProductController.html":{},"miscellaneous/variables.html":{}}}],["imodeluser",{"_index":17,"title":{"interfaces/IModelUser.html":{}},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["import",{"_index":33,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"classes/ProductRoutes.html":{},"interfaces/Request.html":{},"classes/Server.html":{},"classes/UserController.html":{},"classes/UserRoutes.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"interfaces/ChatMessage.html":{},"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"classes/ProductRoutes.html":{},"interfaces/Request.html":{},"classes/Server.html":{},"classes/UserController.html":{},"classes/UserRoutes.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ChatMessage.html":{},"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"classes/ProductRoutes.html":{},"interfaces/Request.html":{},"classes/Server.html":{},"classes/UserController.html":{},"classes/UserRoutes.html":{}}}],["information",{"_index":371,"title":{},"body":{"classes/UserController.html":{}}}],["initsocket",{"_index":260,"title":{},"body":{"classes/Server.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ChatMessage.html":{},"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/Request.html":{}},"body":{"interfaces/ChatMessage.html":{},"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ChatMessage.html":{},"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"index.html":{}}}],["invalid",{"_index":199,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["io",{"_index":258,"title":{},"body":{"classes/Server.html":{}}}],["ioccounter",{"_index":259,"title":{},"body":{"classes/Server.html":{}}}],["ioserver",{"_index":265,"title":{},"body":{"classes/Server.html":{}}}],["ioserver(this.server",{"_index":293,"title":{},"body":{"classes/Server.html":{}}}],["iproduct",{"_index":106,"title":{"interfaces/IProduct.html":{}},"body":{"interfaces/IProduct.html":{},"classes/ProductController.html":{},"coverage.html":{}}}],["ismatch",{"_index":102,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["isvalidoperation",{"_index":195,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["iuser",{"_index":42,"title":{"interfaces/IUser.html":{}},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"coverage.html":{}}}],["json.stringify(m",{"_index":319,"title":{},"body":{"classes/Server.html":{}}}],["jsonwebtoken",{"_index":40,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"dependencies.html":{}}}],["jwt",{"_index":39,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/Request.html":{}}}],["jwt.jwtpayload",{"_index":51,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/Request.html":{}}}],["jwt.sign",{"_index":90,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["jwt.verify(token",{"_index":137,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"miscellaneous/variables.html":{}}}],["jwt_secret",{"_index":402,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtpayload",{"_index":117,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["keepalive",{"_index":471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["key",{"_index":218,"title":{},"body":{"classes/ProductController.html":{}}}],["limit",{"_index":186,"title":{},"body":{"classes/ProductController.html":{}}}],["literal",{"_index":116,"title":{},"body":{"interfaces/IUser.html":{}}}],["localfield",{"_index":71,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["localhost",{"_index":451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":100,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"classes/UserRoutes.html":{}}}],["logout",{"_index":383,"title":{},"body":{"classes/UserRoutes.html":{}}}],["logoutuser",{"_index":340,"title":{},"body":{"classes/UserController.html":{}}}],["logoutuser(req",{"_index":347,"title":{},"body":{"classes/UserController.html":{}}}],["m",{"_index":317,"title":{},"body":{"classes/Server.html":{}}}],["m.author",{"_index":321,"title":{},"body":{"classes/Server.html":{}}}],["m.message",{"_index":322,"title":{},"body":{"classes/Server.html":{}}}],["matching",{"_index":16,"title":{},"body":{"interfaces/ChatMessage.html":{},"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"classes/ProductRoutes.html":{},"interfaces/Request.html":{},"classes/Server.html":{},"classes/UserController.html":{},"classes/UserRoutes.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":10,"title":{},"body":{"interfaces/ChatMessage.html":{},"classes/Server.html":{},"miscellaneous/enumerations.html":{}}}],["methods",{"_index":21,"title":{},"body":{"interfaces/IModelUser.html":{},"classes/ProductController.html":{},"classes/ProductRoutes.html":{},"classes/Server.html":{},"classes/UserController.html":{},"classes/UserRoutes.html":{}}}],["middleware/auth",{"_index":241,"title":{},"body":{"classes/ProductRoutes.html":{},"classes/UserRoutes.html":{}}}],["miscellaneous",{"_index":426,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":20,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["model(\"product",{"_index":115,"title":{},"body":{"interfaces/IProduct.html":{},"miscellaneous/variables.html":{}}}],["model(\"user",{"_index":105,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["models/productmodel",{"_index":168,"title":{},"body":{"classes/ProductController.html":{}}}],["models/usermodel",{"_index":123,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"classes/UserController.html":{}}}],["modules",{"_index":436,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mongo",{"_index":283,"title":{},"body":{"classes/Server.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mongodb://127.0.0.1:27017",{"_index":448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongodb_uri",{"_index":403,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mongoose",{"_index":37,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"dependencies.html":{}}}],["mongoose.connect(config.server.mongodb_uri",{"_index":469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoose.connection",{"_index":459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["msg",{"_index":326,"title":{},"body":{"classes/Server.html":{}}}],["name",{"_index":28,"title":{},"body":{"interfaces/IModelUser.html":{},"classes/ProductController.html":{},"classes/UserController.html":{}}}],["namespace",{"_index":126,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Request.html":{}}}],["new",{"_index":57,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"classes/ProductRoutes.html":{},"interfaces/Request.html":{},"classes/Server.html":{},"classes/UserController.html":{},"classes/UserRoutes.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":85,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["next(error",{"_index":81,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["nextfunction",{"_index":119,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["null",{"_index":174,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["number",{"_index":45,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"classes/Server.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(req.body",{"_index":193,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["optional",{"_index":29,"title":{},"body":{"interfaces/IModelUser.html":{},"classes/ProductController.html":{},"classes/UserController.html":{}}}],["optionssuccessstatus",{"_index":303,"title":{},"body":{"classes/Server.html":{}}}],["origin",{"_index":294,"title":{},"body":{"classes/Server.html":{}}}],["overview",{"_index":433,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":415,"title":{"dependencies.html":{}},"body":{}}],["parameters",{"_index":27,"title":{},"body":{"interfaces/IModelUser.html":{},"classes/ProductController.html":{},"classes/UserController.html":{}}}],["parseint(string(req.query.limit",{"_index":187,"title":{},"body":{"classes/ProductController.html":{}}}],["parseint(string(req.query.skip",{"_index":189,"title":{},"body":{"classes/ProductController.html":{}}}],["parts",{"_index":220,"title":{},"body":{"classes/ProductController.html":{}}}],["parts[1",{"_index":223,"title":{},"body":{"classes/ProductController.html":{}}}],["password",{"_index":24,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["please",{"_index":145,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"miscellaneous/variables.html":{}}}],["port",{"_index":309,"title":{},"body":{"classes/Server.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":295,"title":{},"body":{"classes/Server.html":{}}}],["postcode",{"_index":44,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["price",{"_index":110,"title":{},"body":{"interfaces/IProduct.html":{},"classes/ProductController.html":{},"miscellaneous/variables.html":{}}}],["private",{"_index":257,"title":{},"body":{"classes/Server.html":{}}}],["process.env.jwt_secret",{"_index":445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mongodb_url",{"_index":447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.server_hostname",{"_index":450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.server_port",{"_index":452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.exit(1",{"_index":458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["product",{"_index":70,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"classes/ProductController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["product.find",{"_index":185,"title":{},"body":{"classes/ProductController.html":{}}}],["product.findone",{"_index":170,"title":{},"body":{"classes/ProductController.html":{}}}],["product.findoneanddelete",{"_index":208,"title":{},"body":{"classes/ProductController.html":{}}}],["product.save",{"_index":176,"title":{},"body":{"classes/ProductController.html":{}}}],["product.updateone",{"_index":201,"title":{},"body":{"classes/ProductController.html":{}}}],["productcontroller",{"_index":148,"title":{"classes/ProductController.html":{}},"body":{"classes/ProductController.html":{},"classes/ProductRoutes.html":{},"coverage.html":{}}}],["productname",{"_index":111,"title":{},"body":{"interfaces/IProduct.html":{},"classes/ProductController.html":{},"miscellaneous/variables.html":{}}}],["productroutes",{"_index":229,"title":{"classes/ProductRoutes.html":{}},"body":{"classes/ProductRoutes.html":{},"classes/Server.html":{},"coverage.html":{}}}],["productroutes().router",{"_index":330,"title":{},"body":{"classes/Server.html":{}}}],["products",{"_index":184,"title":{},"body":{"classes/ProductController.html":{}}}],["productschema",{"_index":114,"title":{},"body":{"interfaces/IProduct.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":32,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["properties",{"_index":8,"title":{},"body":{"interfaces/ChatMessage.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"classes/ProductRoutes.html":{},"interfaces/Request.html":{},"classes/Server.html":{},"classes/UserRoutes.html":{}}}],["public",{"_index":151,"title":{},"body":{"classes/ProductController.html":{},"classes/ProductRoutes.html":{},"classes/Server.html":{},"classes/UserController.html":{},"classes/UserRoutes.html":{}}}],["reconnect",{"_index":467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reestablished",{"_index":464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ref",{"_index":69,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["register",{"_index":382,"title":{},"body":{"classes/UserRoutes.html":{}}}],["registeruser",{"_index":341,"title":{},"body":{"classes/UserController.html":{}}}],["registeruser(req",{"_index":349,"title":{},"body":{"classes/UserController.html":{}}}],["req",{"_index":128,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"interfaces/Request.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["req.body",{"_index":175,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["req.body.email",{"_index":354,"title":{},"body":{"classes/UserController.html":{}}}],["req.body.password",{"_index":364,"title":{},"body":{"classes/UserController.html":{}}}],["req.body.productname",{"_index":172,"title":{},"body":{"classes/ProductController.html":{}}}],["req.body.role",{"_index":200,"title":{},"body":{"classes/ProductController.html":{}}}],["req.header('authorization",{"_index":132,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"miscellaneous/variables.html":{}}}],["req.query._id",{"_index":202,"title":{},"body":{"classes/ProductController.html":{}}}],["req.query.sortby",{"_index":219,"title":{},"body":{"classes/ProductController.html":{}}}],["req.token",{"_index":141,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["req.user",{"_index":142,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"miscellaneous/variables.html":{}}}],["req.user._id",{"_index":171,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["req.user.role",{"_index":226,"title":{},"body":{"classes/ProductController.html":{}}}],["req.user.save",{"_index":370,"title":{},"body":{"classes/UserController.html":{}}}],["req.user.tokens",{"_index":367,"title":{},"body":{"classes/UserController.html":{}}}],["req.user.tokens.filter((token",{"_index":368,"title":{},"body":{"classes/UserController.html":{}}}],["request",{"_index":120,"title":{"interfaces/Request.html":{}},"body":{"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"interfaces/Request.html":{},"classes/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":60,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["res",{"_index":129,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"interfaces/Request.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["res.status(200).send",{"_index":206,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["res.status(200).send(\"product",{"_index":180,"title":{},"body":{"classes/ProductController.html":{}}}],["res.status(200).send(\"user",{"_index":361,"title":{},"body":{"classes/UserController.html":{}}}],["res.status(200).send(docs",{"_index":214,"title":{},"body":{"classes/ProductController.html":{}}}],["res.status(200).send(products",{"_index":190,"title":{},"body":{"classes/ProductController.html":{}}}],["res.status(200).send(req.user",{"_index":372,"title":{},"body":{"classes/UserController.html":{}}}],["res.status(201).send",{"_index":177,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["res.status(204).send",{"_index":212,"title":{},"body":{"classes/ProductController.html":{}}}],["res.status(400).send",{"_index":198,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["res.status(400).send(e",{"_index":179,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["res.status(400).send(err",{"_index":210,"title":{},"body":{"classes/ProductController.html":{}}}],["res.status(401).send",{"_index":144,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"miscellaneous/variables.html":{}}}],["res.status(500).send",{"_index":191,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["response",{"_index":121,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"interfaces/Request.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":15,"title":{},"body":{"interfaces/ChatMessage.html":{},"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"classes/ProductRoutes.html":{},"interfaces/Request.html":{},"classes/Server.html":{},"classes/UserController.html":{},"classes/UserRoutes.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":80,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"classes/ProductController.html":{},"classes/UserController.html":{}}}],["returns",{"_index":31,"title":{},"body":{"interfaces/IModelUser.html":{},"classes/ProductController.html":{},"classes/ProductRoutes.html":{},"classes/Server.html":{},"classes/UserController.html":{},"classes/UserRoutes.html":{}}}],["role",{"_index":48,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["router",{"_index":231,"title":{},"body":{"classes/ProductRoutes.html":{},"classes/UserRoutes.html":{}}}],["routes",{"_index":232,"title":{},"body":{"classes/ProductRoutes.html":{},"classes/Server.html":{},"classes/UserRoutes.html":{}}}],["routes/productrouter",{"_index":287,"title":{},"body":{"classes/Server.html":{}}}],["routes/userrouter",{"_index":286,"title":{},"body":{"classes/Server.html":{}}}],["run",{"_index":480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["running",{"_index":333,"title":{},"body":{"classes/Server.html":{}}}],["s",{"_index":310,"title":{},"body":{"classes/Server.html":{}}}],["salt",{"_index":79,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["save(next",{"_index":76,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["schema",{"_index":35,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["schema.types.objectid",{"_index":112,"title":{},"body":{"interfaces/IProduct.html":{},"miscellaneous/variables.html":{}}}],["server",{"_index":254,"title":{"classes/Server.html":{}},"body":{"classes/Server.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server.start",{"_index":335,"title":{},"body":{"classes/Server.html":{}}}],["server_hostname",{"_index":404,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server_port",{"_index":405,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["set",{"_index":456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settimeout",{"_index":468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skip",{"_index":188,"title":{},"body":{"classes/ProductController.html":{}}}],["socket",{"_index":278,"title":{},"body":{"classes/Server.html":{}}}],["socket.io",{"_index":279,"title":{},"body":{"classes/Server.html":{},"dependencies.html":{}}}],["socket.on(chatevent.disconnect",{"_index":323,"title":{},"body":{"classes/Server.html":{}}}],["socket.on(chatevent.message",{"_index":316,"title":{},"body":{"classes/Server.html":{}}}],["sockettimeoutms",{"_index":475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sort",{"_index":217,"title":{},"body":{"classes/ProductController.html":{}}}],["sort[parts[0",{"_index":222,"title":{},"body":{"classes/ProductController.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ChatMessage.html":{},"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"classes/ProductRoutes.html":{},"interfaces/Request.html":{},"classes/Server.html":{},"classes/UserController.html":{},"classes/UserRoutes.html":{}}}],["src/.../auth.ts",{"_index":438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../config.ts",{"_index":439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constant.ts",{"_index":428,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../mongoose.ts",{"_index":440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../productmodel.ts",{"_index":441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../server.ts",{"_index":442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../usermodel.ts",{"_index":443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/chat/chatmessage.ts",{"_index":6,"title":{},"body":{"interfaces/ChatMessage.html":{},"coverage.html":{}}}],["src/chat/constant.ts",{"_index":429,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/config.ts",{"_index":399,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/controllers/productcontroller.ts",{"_index":150,"title":{},"body":{"classes/ProductController.html":{},"coverage.html":{}}}],["src/controllers/productcontroller.ts:123",{"_index":162,"title":{},"body":{"classes/ProductController.html":{}}}],["src/controllers/productcontroller.ts:26",{"_index":164,"title":{},"body":{"classes/ProductController.html":{}}}],["src/controllers/productcontroller.ts:42",{"_index":166,"title":{},"body":{"classes/ProductController.html":{}}}],["src/controllers/productcontroller.ts:6",{"_index":158,"title":{},"body":{"classes/ProductController.html":{}}}],["src/controllers/productcontroller.ts:73",{"_index":160,"title":{},"body":{"classes/ProductController.html":{}}}],["src/controllers/usercontroller.ts",{"_index":337,"title":{},"body":{"classes/UserController.html":{},"coverage.html":{}}}],["src/controllers/usercontroller.ts:29",{"_index":344,"title":{},"body":{"classes/UserController.html":{}}}],["src/controllers/usercontroller.ts:42",{"_index":348,"title":{},"body":{"classes/UserController.html":{}}}],["src/controllers/usercontroller.ts:57",{"_index":346,"title":{},"body":{"classes/UserController.html":{}}}],["src/controllers/usercontroller.ts:6",{"_index":350,"title":{},"body":{"classes/UserController.html":{}}}],["src/controllers/usercontroller.ts:62",{"_index":352,"title":{},"body":{"classes/UserController.html":{}}}],["src/db/mongoose.ts",{"_index":407,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/middleware/auth.ts",{"_index":118,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/productmodel.ts",{"_index":107,"title":{},"body":{"interfaces/IProduct.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/usermodel.ts",{"_index":18,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/usermodel.ts:20",{"_index":26,"title":{},"body":{"interfaces/IModelUser.html":{}}}],["src/routes/productrouter.ts",{"_index":230,"title":{},"body":{"classes/ProductRoutes.html":{},"coverage.html":{}}}],["src/routes/productrouter.ts:15",{"_index":238,"title":{},"body":{"classes/ProductRoutes.html":{}}}],["src/routes/productrouter.ts:7",{"_index":237,"title":{},"body":{"classes/ProductRoutes.html":{}}}],["src/routes/productrouter.ts:8",{"_index":234,"title":{},"body":{"classes/ProductRoutes.html":{}}}],["src/routes/userrouter.ts",{"_index":376,"title":{},"body":{"classes/UserRoutes.html":{},"coverage.html":{}}}],["src/routes/userrouter.ts:17",{"_index":379,"title":{},"body":{"classes/UserRoutes.html":{}}}],["src/routes/userrouter.ts:8",{"_index":378,"title":{},"body":{"classes/UserRoutes.html":{}}}],["src/routes/userrouter.ts:9",{"_index":377,"title":{},"body":{"classes/UserRoutes.html":{}}}],["src/server.ts",{"_index":255,"title":{},"body":{"classes/Server.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server.ts:16",{"_index":269,"title":{},"body":{"classes/Server.html":{}}}],["src/server.ts:17",{"_index":264,"title":{},"body":{"classes/Server.html":{}}}],["src/server.ts:18",{"_index":266,"title":{},"body":{"classes/Server.html":{}}}],["src/server.ts:19",{"_index":262,"title":{},"body":{"classes/Server.html":{}}}],["src/server.ts:37",{"_index":270,"title":{},"body":{"classes/Server.html":{}}}],["src/server.ts:48",{"_index":271,"title":{},"body":{"classes/Server.html":{}}}],["src/server.ts:72",{"_index":272,"title":{},"body":{"classes/Server.html":{}}}],["src/server.ts:77",{"_index":273,"title":{},"body":{"classes/Server.html":{}}}],["staff",{"_index":65,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"classes/ProductController.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":261,"title":{},"body":{"classes/Server.html":{}}}],["statements",{"_index":397,"title":{},"body":{"coverage.html":{}}}],["street",{"_index":47,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["string",{"_index":11,"title":{},"body":{"interfaces/ChatMessage.html":{},"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"interfaces/Request.html":{},"miscellaneous/variables.html":{}}}],["string(req.query.sortby).split",{"_index":221,"title":{},"body":{"classes/ProductController.html":{}}}],["table",{"_index":414,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":413,"title":{},"body":{"coverage.html":{}}}],["this.app",{"_index":288,"title":{},"body":{"classes/Server.html":{}}}],["this.app.get(\"port",{"_index":311,"title":{},"body":{"classes/Server.html":{}}}],["this.app.use",{"_index":328,"title":{},"body":{"classes/Server.html":{}}}],["this.app.use(compression",{"_index":298,"title":{},"body":{"classes/Server.html":{}}}],["this.app.use(cors",{"_index":301,"title":{},"body":{"classes/Server.html":{}}}],["this.app.use(express.json",{"_index":297,"title":{},"body":{"classes/Server.html":{}}}],["this.app.use(express.urlencoded",{"_index":299,"title":{},"body":{"classes/Server.html":{}}}],["this.config",{"_index":291,"title":{},"body":{"classes/Server.html":{}}}],["this.initsocket",{"_index":296,"title":{},"body":{"classes/Server.html":{}}}],["this.io",{"_index":292,"title":{},"body":{"classes/Server.html":{}}}],["this.io.emit('message",{"_index":320,"title":{},"body":{"classes/Server.html":{}}}],["this.io.on(chatevent.connect",{"_index":305,"title":{},"body":{"classes/Server.html":{}}}],["this.ioccounter",{"_index":312,"title":{},"body":{"classes/Server.html":{}}}],["this.productcontroller.createproduct",{"_index":245,"title":{},"body":{"classes/ProductRoutes.html":{}}}],["this.productcontroller.deleteproduct",{"_index":251,"title":{},"body":{"classes/ProductRoutes.html":{}}}],["this.productcontroller.getproductlist",{"_index":253,"title":{},"body":{"classes/ProductRoutes.html":{}}}],["this.productcontroller.getproducts",{"_index":247,"title":{},"body":{"classes/ProductRoutes.html":{}}}],["this.productcontroller.updateproduct",{"_index":249,"title":{},"body":{"classes/ProductRoutes.html":{}}}],["this.router",{"_index":242,"title":{},"body":{"classes/ProductRoutes.html":{},"classes/UserRoutes.html":{}}}],["this.router.delete(\"/product",{"_index":250,"title":{},"body":{"classes/ProductRoutes.html":{}}}],["this.router.get(\"/product",{"_index":246,"title":{},"body":{"classes/ProductRoutes.html":{}}}],["this.router.get(\"/product/list",{"_index":252,"title":{},"body":{"classes/ProductRoutes.html":{}}}],["this.router.get(\"/user",{"_index":390,"title":{},"body":{"classes/UserRoutes.html":{}}}],["this.router.patch(\"/user",{"_index":392,"title":{},"body":{"classes/UserRoutes.html":{}}}],["this.router.post(\"/login",{"_index":386,"title":{},"body":{"classes/UserRoutes.html":{}}}],["this.router.post(\"/logout",{"_index":388,"title":{},"body":{"classes/UserRoutes.html":{}}}],["this.router.post(\"/product",{"_index":244,"title":{},"body":{"classes/ProductRoutes.html":{}}}],["this.router.post(\"/register",{"_index":384,"title":{},"body":{"classes/UserRoutes.html":{}}}],["this.router.put(\"/product",{"_index":248,"title":{},"body":{"classes/ProductRoutes.html":{}}}],["this.routes",{"_index":243,"title":{},"body":{"classes/ProductRoutes.html":{},"classes/Server.html":{},"classes/UserRoutes.html":{}}}],["this.server",{"_index":289,"title":{},"body":{"classes/Server.html":{}}}],["this.server.listen(config.server.port",{"_index":331,"title":{},"body":{"classes/Server.html":{}}}],["this.usercontroller.authenticateuser",{"_index":387,"title":{},"body":{"classes/UserRoutes.html":{}}}],["this.usercontroller.getuser",{"_index":391,"title":{},"body":{"classes/UserRoutes.html":{}}}],["this.usercontroller.logoutuser",{"_index":389,"title":{},"body":{"classes/UserRoutes.html":{}}}],["this.usercontroller.registeruser",{"_index":385,"title":{},"body":{"classes/UserRoutes.html":{}}}],["this.usercontroller.updateuser",{"_index":393,"title":{},"body":{"classes/UserRoutes.html":{}}}],["thisismysecret",{"_index":446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["throw",{"_index":98,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"miscellaneous/variables.html":{}}}],["timestamps",{"_index":67,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":52,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["token.token",{"_index":369,"title":{},"body":{"classes/UserController.html":{}}}],["tokens",{"_index":49,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["tokens.token",{"_index":140,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"miscellaneous/variables.html":{}}}],["trim",{"_index":62,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["true",{"_index":61,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"classes/ProductController.html":{},"classes/Server.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":130,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"interfaces/Request.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":12,"title":{},"body":{"interfaces/ChatMessage.html":{},"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"classes/ProductRoutes.html":{},"interfaces/Request.html":{},"classes/Server.html":{},"classes/UserController.html":{},"classes/UserRoutes.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":424,"title":{},"body":{"dependencies.html":{}}}],["unique",{"_index":58,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["unknown",{"_index":167,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["updateproduct",{"_index":156,"title":{},"body":{"classes/ProductController.html":{}}}],["updateproduct(req",{"_index":165,"title":{},"body":{"classes/ProductController.html":{}}}],["updates",{"_index":192,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["updates.every((update",{"_index":196,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["updateuser",{"_index":342,"title":{},"body":{"classes/UserController.html":{}}}],["updateuser(req",{"_index":351,"title":{},"body":{"classes/UserController.html":{}}}],["upsert",{"_index":203,"title":{},"body":{"classes/ProductController.html":{},"classes/UserController.html":{}}}],["usecreateindex",{"_index":473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usenewurlparser",{"_index":472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":77,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IProduct.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"classes/ProductController.html":{},"interfaces/Request.html":{},"classes/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user(req.body",{"_index":356,"title":{},"body":{"classes/UserController.html":{}}}],["user._id.tostring",{"_index":91,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["user.findbycredentials(req.body.email",{"_index":363,"title":{},"body":{"classes/UserController.html":{}}}],["user.findone",{"_index":97,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/Request.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["user.generateauthtoken",{"_index":359,"title":{},"body":{"classes/UserController.html":{}}}],["user.hashpassword",{"_index":358,"title":{},"body":{"classes/UserController.html":{}}}],["user.password",{"_index":84,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"classes/UserController.html":{}}}],["user.save",{"_index":95,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"classes/UserController.html":{}}}],["user.tokens",{"_index":93,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["user.tokens.concat",{"_index":94,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["user.updateone",{"_index":375,"title":{},"body":{"classes/UserController.html":{}}}],["usercontroller",{"_index":336,"title":{"classes/UserController.html":{}},"body":{"classes/UserController.html":{},"classes/UserRoutes.html":{},"coverage.html":{}}}],["username",{"_index":43,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"classes/UserController.html":{},"miscellaneous/variables.html":{}}}],["userroutes",{"_index":285,"title":{"classes/UserRoutes.html":{}},"body":{"classes/Server.html":{},"classes/UserRoutes.html":{},"coverage.html":{}}}],["userroutes().router",{"_index":329,"title":{},"body":{"classes/Server.html":{}}}],["userschema",{"_index":56,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userschema.methods.generateauthtoken",{"_index":89,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["userschema.methods.hashpassword",{"_index":86,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["userschema.pre(\"save",{"_index":74,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["userschema.statics.findbycredentials",{"_index":96,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["userschema.virtual('products",{"_index":68,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}],["useunifiedtopology",{"_index":474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["value",{"_index":236,"title":{},"body":{"classes/ProductRoutes.html":{},"classes/Server.html":{},"classes/UserRoutes.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":400,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":437,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":239,"title":{},"body":{"classes/ProductRoutes.html":{},"classes/Server.html":{},"classes/UserRoutes.html":{}}}],["websocekt",{"_index":307,"title":{},"body":{"classes/Server.html":{}}}],["websocket",{"_index":314,"title":{},"body":{"classes/Server.html":{}}}],["wrong",{"_index":104,"title":{},"body":{"interfaces/IModelUser.html":{},"interfaces/IUser.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ChatMessage.html":{"url":"interfaces/ChatMessage.html","title":"interface - ChatMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChatMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chatMessage.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            author\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        author\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        author:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ChatMessage {\n    author: string;\n    message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IModelUser.html":{"url":"interfaces/IModelUser.html","title":"interface - IModelUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IModelUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/userModel.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        findByCredentials\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findByCredentials\n                        \n                    \n                \n            \n            \n                \nfindByCredentials(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/userModel.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Document, Schema, Model, model, Error } from \"mongoose\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\"\nimport config from \"../config\"\n\nexport interface IUser extends Document {\n    username: string;\n    postcode: Number;\n    city: string;\n    street: string;\n    role: string;\n    email: string;\n    password: string;\n    tokens: { _id: string | jwt.JwtPayload; token: string; }[];\n    generateAuthToken: () => string;\n    hashPassword: () => string;\n}\n\nexport interface IModelUser extends Model {\n    findByCredentials(email: string, password: string): Promise\n}\n\nexport const userSchema: Schema = new Schema({\n    username: {\n        type: String,\n        unique: false,\n        required: true,\n        trim: true\n    },\n    postcode: {\n        type: Number,\n        unique: false,\n        required: false,\n    },\n    city: {\n        type: String,\n        unique: false,\n        required: false,\n        trim: true\n    },\n    street: {\n        type: String,\n        unique: false,\n        required: false,\n        trim: true\n    },\n    role: {\n        type: String,\n        enum: ['Admin', 'Staff', 'Customer'],\n        unique: false,\n        required: true,\n    },\n    email: {\n        type: String,\n        unique: true,\n        required: true,\n        trim: true\n    },\n    password: {\n        type: String,\n        required: true,\n    },\n    tokens: [{\n        token: {\n            type: String,\n            required: true\n        }\n    }],\n}, {\n    timestamps: true\n});\n\nuserSchema.virtual('products', {\n    ref: 'Product',\n    localField: '_id',\n    foreignField: 'creator'\n})\n\nuserSchema.virtual('products', {\n    ref: 'Product',\n    localField: '_id',\n    foreignField: 'customer'\n})\n\n// userSchema.pre(\"save\", function save(next) {\n//     const user = this;\n//     bcrypt.genSalt(10, (error, salt) => {\n//         if (error) {\n//             return next(error);\n//         }\n//         bcrypt.hash(this.password, salt, (error, hash) => {\n//             if (error) {\n//                 return next(error);\n//             }\n//             user.password = hash;\n//             next();\n//         });\n//     });\n// });\n\nuserSchema.methods.hashPassword = async function () {\n    const user = this;\n    return bcrypt.hash(this.password, await bcrypt.genSalt(10));\n}\n\nuserSchema.methods.generateAuthToken = async function () {\n    const user = this\n    const token = jwt.sign({\n        _id: user._id.toString()\n    }, config.server.jwt_secret)\n    user.tokens = user.tokens.concat({\n        token\n    })\n    user.save();\n\n    return token;\n};\n\nuserSchema.statics.findByCredentials = async function (email: string, password: string): Promise {\n\n    const user = await User.findOne({\n        email\n    })\n\n    if (!user) {\n        throw new Error('Unable to login, user not found')\n    }\n\n    const isMatch = await bcrypt.compare(password, user.password)\n\n    if (!isMatch) {\n        throw new Error('Unable to login, password wrong')\n    }\n\n    return user\n};\n\nexport const User: IModelUser = model(\"User\", userSchema);\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IProduct.html":{"url":"interfaces/IProduct.html","title":"interface - IProduct","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IProduct\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/productModel.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            creator\n                                        \n                                \n                                \n                                        \n                                            customer\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            image\n                                        \n                                \n                                \n                                        \n                                            price\n                                        \n                                \n                                \n                                        \n                                            productname\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        creator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        creator:     Schema.Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Schema.Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        customer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customer:     Schema.Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Schema.Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        image\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        image:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        price\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        price:         Number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        productname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document, Schema, Model, model, Error } from \"mongoose\";\n\nexport interface IProduct extends Document {\n    productname: string;\n    price: Number;\n    description: string;\n    image: Buffer;\n    creator: Schema.Types.ObjectId;\n    customer: Schema.Types.ObjectId;\n}\n\nexport const productSchema: Schema = new Schema({\n    productname: {\n        type: String,\n        unique: false,\n        required: true,\n        trim: true\n    },\n    price: {\n        type: Number,\n        unique: false,\n        required: true,\n    },\n    description: {\n        type: String,\n        required: true,\n        trim: true\n    },\n    image: {\n        type: Buffer\n    },\n    creator: {\n        type: Schema.Types.ObjectId,\n        required: true,\n        ref: 'User'\n    },\n    customer: {\n        type: Schema.Types.ObjectId,\n        ref: 'User'\n    }\n}, {\n    timestamps: true\n});\n\n\nexport const Product: Model = model(\"Product\", productSchema);\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUser.html":{"url":"interfaces/IUser.html","title":"interface - IUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/userModel.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            city\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            generateAuthToken\n                                        \n                                \n                                \n                                        \n                                            hashPassword\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            postcode\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            street\n                                        \n                                \n                                \n                                        \n                                            tokens\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        city\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        city:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        generateAuthToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        generateAuthToken:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hashPassword\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hashPassword:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postcode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        postcode:         Number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        street\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        street:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokens\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tokens:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document, Schema, Model, model, Error } from \"mongoose\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\"\nimport config from \"../config\"\n\nexport interface IUser extends Document {\n    username: string;\n    postcode: Number;\n    city: string;\n    street: string;\n    role: string;\n    email: string;\n    password: string;\n    tokens: { _id: string | jwt.JwtPayload; token: string; }[];\n    generateAuthToken: () => string;\n    hashPassword: () => string;\n}\n\nexport interface IModelUser extends Model {\n    findByCredentials(email: string, password: string): Promise\n}\n\nexport const userSchema: Schema = new Schema({\n    username: {\n        type: String,\n        unique: false,\n        required: true,\n        trim: true\n    },\n    postcode: {\n        type: Number,\n        unique: false,\n        required: false,\n    },\n    city: {\n        type: String,\n        unique: false,\n        required: false,\n        trim: true\n    },\n    street: {\n        type: String,\n        unique: false,\n        required: false,\n        trim: true\n    },\n    role: {\n        type: String,\n        enum: ['Admin', 'Staff', 'Customer'],\n        unique: false,\n        required: true,\n    },\n    email: {\n        type: String,\n        unique: true,\n        required: true,\n        trim: true\n    },\n    password: {\n        type: String,\n        required: true,\n    },\n    tokens: [{\n        token: {\n            type: String,\n            required: true\n        }\n    }],\n}, {\n    timestamps: true\n});\n\nuserSchema.virtual('products', {\n    ref: 'Product',\n    localField: '_id',\n    foreignField: 'creator'\n})\n\nuserSchema.virtual('products', {\n    ref: 'Product',\n    localField: '_id',\n    foreignField: 'customer'\n})\n\n// userSchema.pre(\"save\", function save(next) {\n//     const user = this;\n//     bcrypt.genSalt(10, (error, salt) => {\n//         if (error) {\n//             return next(error);\n//         }\n//         bcrypt.hash(this.password, salt, (error, hash) => {\n//             if (error) {\n//                 return next(error);\n//             }\n//             user.password = hash;\n//             next();\n//         });\n//     });\n// });\n\nuserSchema.methods.hashPassword = async function () {\n    const user = this;\n    return bcrypt.hash(this.password, await bcrypt.genSalt(10));\n}\n\nuserSchema.methods.generateAuthToken = async function () {\n    const user = this\n    const token = jwt.sign({\n        _id: user._id.toString()\n    }, config.server.jwt_secret)\n    user.tokens = user.tokens.concat({\n        token\n    })\n    user.save();\n\n    return token;\n};\n\nuserSchema.statics.findByCredentials = async function (email: string, password: string): Promise {\n\n    const user = await User.findOne({\n        email\n    })\n\n    if (!user) {\n        throw new Error('Unable to login, user not found')\n    }\n\n    const isMatch = await bcrypt.compare(password, user.password)\n\n    if (!isMatch) {\n        throw new Error('Unable to login, password wrong')\n    }\n\n    return user\n};\n\nexport const User: IModelUser = model(\"User\", userSchema);\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middleware/auth.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            _id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _id:         string | jwt.JwtPayload\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string | jwt.JwtPayload\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { NextFunction, Request, Response } from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport { IUser, User } from \"../models/userModel\";\nimport config from \"../config\"\n\ndeclare global {\n    namespace Express {\n        interface Request {\n            token: string;\n            user: IUser;\n        }\n    }\n    interface JwtPayload {\n        _id: string | jwt.JwtPayload;\n    }\n}\n\nexport const auth = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n        const header = req.header('Authorization')\n        console.log(header)\n        if (!header) {\n            throw new Error()\n        }\n        const token = header.replace('Bearer ', '');\n        // console.log(token)\n        const decoded = jwt.verify(token, config.server.jwt_secret) as JwtPayload\n        // console.log(decoded)\n        const user = await User.findOne({\n            _id: decoded._id,\n            'tokens.token': token\n        })\n        if (!user) {\n            throw new Error()\n        }\n        req.token = token;\n        req.user = user;\n        next()\n    } catch (error) {\n        res.status(401).send({\n            error: 'Please authenticate.'\n        })\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductController.html":{"url":"classes/ProductController.html","title":"class - ProductController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controllers/productController.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createProduct\n                            \n                            \n                                    Public\n                                    Async\n                                deleteProduct\n                            \n                            \n                                    Public\n                                    Async\n                                getProductList\n                            \n                            \n                                    Public\n                                    Async\n                                getProducts\n                            \n                            \n                                    Public\n                                    Async\n                                updateProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProduct(req: Request, res: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/controllers/productController.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteProduct(req: Request, res: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/controllers/productController.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getProductList\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProductList(req: Request, res: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/controllers/productController.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getProducts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProducts(req: Request, res: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/controllers/productController.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProduct(req: Request, res: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/controllers/productController.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Request, Response } from \"express\";\nimport { IProduct, Product } from \"../models/productModel\";\n\n\nexport class ProductController {\n  public async createProduct(req: Request, res: Response) {\n    console.log(\"Create Product\");\n    await Product.findOne({ creator: req.user._id, productname: req.body.productname }, async (err: any, results: any) => {\n      if (!err && results === null) {\n        const product = new Product({\n          ...req.body,\n          creator: req.user._id,\n        })\n        try {\n          await product.save()\n          res.status(201).send({ product })\n        } catch (e) {\n          res.status(400).send(e)\n        }\n      } else {\n        res.status(200).send(\"Product already exists\")\n      }\n    })\n  }\n\n  public async getProducts(req: Request, res: Response) {\n    console.log(\"Get Products\")\n    try {\n      const products: IProduct[] = await Product.find(\n        {},\n        {},\n        {\n          limit: parseInt(String(req.query.limit)),\n          skip: parseInt(String(req.query.skip))\n        })\n      res.status(200).send(products)\n    } catch (e) {\n      res.status(500).send()\n    }\n  }\n\n  public async updateProduct(req: Request, res: Response) {\n    const updates = Object.keys(req.body)\n    const allowedUpdates = ['productname', 'price', 'description', 'image']\n    const isValidOperation = updates.every((update) => allowedUpdates.includes(update))\n    if (!isValidOperation) {\n      return res.status(400).send({ error: 'Invalid updates!' })\n    }\n    try {\n      if (req.body.role === \"Admin\") {\n        Product.updateOne({ _id: req.query._id }, await req.body, { upsert: true }, async function (err, doc) {\n          if (err) {\n            console.log(err)\n            return res.status(400).send({ error: err })\n          }\n          res.status(200).send()\n        });\n      }\n      if (req.body.role === \"Staff\") {\n        Product.updateOne({ creator: req.user._id, _id: req.query._id }, await req.body, { upsert: true }, async function (err, doc) {\n          if (err) {\n            console.log(err)\n            return res.status(400).send({ error: err })\n          }\n          res.status(200).send()\n        });\n      }\n    } catch (e) {\n      res.status(400).send(e)\n    }\n  }\n\n  public async deleteProduct(req: Request, res: Response) {\n    console.log(req.query._id)\n    try {\n      if (req.body.role === \"Admin\") {\n        Product.findOneAndDelete(\n          {\n            _id: req.query._id\n          },\n          {},\n          function (err, docs) {\n            if (err) {\n              console.log(err)\n              res.status(400).send(err)\n            }\n            else {\n              console.log(\"Deleted User : \", docs);\n              if (docs === null) {\n                return res.status(204).send({ error: 'No product was deleted!' })\n              }\n              res.status(200).send(docs)\n            }\n          });\n      }\n      if (req.body.role === \"Staff\") {\n        Product.findOneAndDelete(\n          {\n            creator: req.user._id,\n            _id: req.query._id\n          },\n          {},\n          function (err, docs) {\n            if (err) {\n              console.log(err)\n              res.status(400).send(err)\n            }\n            else {\n              console.log(\"Deleted User : \", docs);\n              if (docs === null) {\n                return res.status(204).send({ error: 'No product was deleted!' })\n              }\n              res.status(200).send(docs)\n            }\n          });\n      }\n    } catch (e) {\n      console.log(e);\n      res.status(400).send(e)\n    }\n  }\n\n  public async getProductList(req: Request, res: Response) {\n    console.log(req.user)\n    console.log(\"Get Products\")\n    const sort: { [key: string]: any } = {}\n    if (req.query.sortBy) {\n      const parts = String(req.query.sortBy).split(':')\n      sort[parts[0]] = parts[1] === 'desc' ? -1 : 1\n    }\n    try {\n      if (req.user.role === \"Staff\") {\n        console.log(\"staff\")\n        const products: IProduct[] = await Product.find(\n          { creator: req.user._id },\n          {},\n          {\n            limit: parseInt(String(req.query.limit)),\n            skip: parseInt(String(req.query.skip)),\n            sort\n          })\n        res.status(200).send(products)\n      }\n      if (req.user.role === \"Customer\") {\n        console.log(\"customer\")\n        const products: IProduct[] = await Product.find(\n          { customer: req.user._id },\n          {},\n          {\n            limit: parseInt(String(req.query.limit)),\n            skip: parseInt(String(req.query.skip)),\n            sort\n          })\n        res.status(200).send(products)\n      }\n    } catch (e) {\n      res.status(500).send()\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductRoutes.html":{"url":"classes/ProductRoutes.html","title":"class - ProductRoutes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductRoutes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/productRouter.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                productController\n                            \n                            \n                                router\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                routes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/routes/productRouter.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        productController\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductController\n\n                    \n                \n                \n                    \n                        Default value : new ProductController()\n                    \n                \n                    \n                        \n                                Defined in src/routes/productRouter.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Router\n\n                    \n                \n                    \n                        \n                                Defined in src/routes/productRouter.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        routes\n                        \n                    \n                \n            \n            \n                \nroutes()\n                \n            \n\n\n            \n                \n                    Defined in src/routes/productRouter.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Router } from \"express\";\nimport { ProductController } from \"../controllers/productController\";\nimport { auth } from \"../middleware/auth\"\n\nexport class ProductRoutes {\n\n    router: Router;\n    public productController: ProductController = new ProductController();\n\n    constructor() {\n        this.router = Router();\n        this.routes();\n    }\n\n    routes() {\n        this.router.post(\"/product\", auth, this.productController.createProduct);\n        this.router.get(\"/product\", this.productController.getProducts);\n        this.router.put(\"/product\", auth, this.productController.updateProduct);\n        this.router.delete(\"/product\", auth, this.productController.deleteProduct);\n        this.router.get(\"/product/list\", auth, this.productController.getProductList);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Request.html":{"url":"interfaces/Request.html","title":"interface - Request","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Request\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middleware/auth.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            token\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         IUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { NextFunction, Request, Response } from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport { IUser, User } from \"../models/userModel\";\nimport config from \"../config\"\n\ndeclare global {\n    namespace Express {\n        interface Request {\n            token: string;\n            user: IUser;\n        }\n    }\n    interface JwtPayload {\n        _id: string | jwt.JwtPayload;\n    }\n}\n\nexport const auth = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n        const header = req.header('Authorization')\n        console.log(header)\n        if (!header) {\n            throw new Error()\n        }\n        const token = header.replace('Bearer ', '');\n        // console.log(token)\n        const decoded = jwt.verify(token, config.server.jwt_secret) as JwtPayload\n        // console.log(decoded)\n        const user = await User.findOne({\n            _id: decoded._id,\n            'tokens.token': token\n        })\n        if (!user) {\n            throw new Error()\n        }\n        req.token = token;\n        req.user = user;\n        next()\n    } catch (error) {\n        res.status(401).send({\n            error: 'Please authenticate.'\n        })\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Server.html":{"url":"classes/Server.html","title":"class - Server","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Server\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                app\n                            \n                            \n                                    Private\n                                io\n                            \n                            \n                                    Private\n                                ioccounter\n                            \n                            \n                                    Public\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                initSocket\n                            \n                            \n                                    Public\n                                routes\n                            \n                            \n                                    Public\n                                start\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/server.ts:19\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        app\n                        \n                    \n                \n            \n                \n                    \n                        Type :     express.Application\n\n                    \n                \n                    \n                        \n                                Defined in src/server.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        io\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ioServer\n\n                    \n                \n                    \n                        \n                                Defined in src/server.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        ioccounter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/server.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :         httpServer\n\n                    \n                \n                    \n                        \n                                Defined in src/server.ts:16\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        config\n                        \n                    \n                \n            \n            \n                \n                    \n                    config()\n                \n            \n\n\n            \n                \n                    Defined in src/server.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        initSocket\n                        \n                    \n                \n            \n            \n                \n                    \n                    initSocket()\n                \n            \n\n\n            \n                \n                    Defined in src/server.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        routes\n                        \n                    \n                \n            \n            \n                \n                    \n                    routes()\n                \n            \n\n\n            \n                \n                    Defined in src/server.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        start\n                        \n                    \n                \n            \n            \n                \n                    \n                    start()\n                \n            \n\n\n            \n                \n                    Defined in src/server.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Server as httpServer, createServer } from \"http\";\nimport express from 'express';\nimport cors from \"cors\";\nimport compression from \"compression\";\nimport config from \"./config\";\n\nimport { Server as ioServer, Socket } from 'socket.io';\nimport { ChatEvent } from \"./chat/constant\";\nimport { ChatMessage } from \"./chat/chatMessage\";\n\nimport { mongo } from \"./db/mongoose\";\nimport { UserRoutes } from \"./routes/userRouter\";\nimport { ProductRoutes } from \"./routes/productRouter\"\n\nclass Server {\n  public server: httpServer;\n  public app: express.Application;\n  private io: ioServer;\n  private ioccounter = 0;\n\n\n  constructor() {\n    this.app = express();\n    this.server = createServer(this.app);\n    this.config();\n    this.io = new ioServer(this.server, {\n      cors: {\n        origin: \"*\",\n        methods: [\"GET\", \"POST\"],\n      }\n    });\n    this.initSocket();\n    this.routes();\n    mongo();\n  }\n\n  public config(): void {\n    this.app.use(express.json());\n    this.app.use(compression());\n    this.app.use(express.urlencoded({ extended: true }));\n    this.app.use(cors({\n      origin: '*',\n      credentials: true,\n      optionsSuccessStatus: 200\n    }));\n  }\n\n  public initSocket() {\n    this.io.on(ChatEvent.CONNECT, (socket: Socket) => {\n      console.log('Connected Websocekt IO client on port %s.', this.app.get(\"port\"));\n      this.ioccounter++;\n      console.log(\"Number of websocket connections: \", this.ioccounter);\n\n      socket.on(ChatEvent.MESSAGE, (m: ChatMessage) => {\n        console.log('[server](message):', JSON.stringify(m));\n        this.io.emit('message', { author: m.author, message: m.message });\n      });\n\n      socket.on(ChatEvent.DISCONNECT, () => {\n        this.ioccounter--;\n        console.log('Client disconnected');\n      });\n\n      /*\n      socket.on(ChatEvent.MESSAGE, (msg) => {\n          console.log('Received message: ' + msg);\n      });\n      */\n    });\n  }\n\n  public routes(): void {\n    this.app.use(\"/\", new UserRoutes().router);\n    this.app.use(\"/\", new ProductRoutes().router);\n  }\n\n  public start(): void {\n    this.server.listen(config.server.port, () => {\n      console.log(`Server is running on ${config.server.hostname}:${config.server.port}`);\n    });\n  }\n}\nconst server = new Server();\nserver.start();\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserController.html":{"url":"classes/UserController.html","title":"class - UserController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controllers/userController.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticateUser\n                            \n                            \n                                    Public\n                                    Async\n                                getUser\n                            \n                            \n                                    Public\n                                    Async\n                                logoutUser\n                            \n                            \n                                    Public\n                                    Async\n                                registerUser\n                            \n                            \n                                    Public\n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        authenticateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticateUser(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/controllers/userController.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(req: Request, res: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/controllers/userController.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        logoutUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    logoutUser(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/controllers/userController.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerUser(req: Request, res: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/controllers/userController.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(req: Request, res: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/controllers/userController.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NextFunction, Request, Response } from \"express\";\nimport bcrypt from \"bcrypt\";\nimport { User } from \"../models/userModel\";\n\nexport class UserController {\n  public async registerUser(req: Request, res: Response) {\n    console.log(\"Register User\");\n    await User.findOne({ email: req.body.email }, async (err: any, results: any) => {\n      if (!err && results === null) {\n        console.log(req.body)\n        const user = new User(req.body)\n        console.log(user)\n        user.password = await user.hashPassword()\n        try {\n          await user.save()\n          // console.log(user)\n          const token = await user.generateAuthToken()\n          res.status(201).send({ user, token })\n        } catch (e) {\n          console.log(\"Here!\")\n          res.status(400).send(e)\n        }\n      } else {\n        res.status(200).send(\"User already exists\")\n      }\n    })\n  }\n\n  public async authenticateUser(req: Request, res: Response, next: NextFunction) {\n    console.log(\"Login User\")\n    console.log(req.body);\n    try {\n      const user = await User.findByCredentials(req.body.email, req.body.password)\n      const token = await user.generateAuthToken()\n      res.status(200).send({ user, token })\n    } catch (e) {\n      console.log(e)\n      res.status(400).send(e)\n    }\n  }\n\n  public async logoutUser(req: Request, res: Response, next: NextFunction) {\n    console.log(\"Logout User\")\n    try {\n      console.log(req.token)\n      req.user.tokens = req.user.tokens.filter((token) => {\n        console.log(token)\n        return token.token !== req.token\n      })\n      await req.user.save()\n      res.status(200).send()\n    } catch (e) {\n      res.status(500).send()\n    }\n  }\n\n  public async getUser(req: Request, res: Response) {\n    console.log(\"Get user information\")\n    res.status(200).send(req.user);\n  }\n\n  public async updateUser(req: Request, res: Response) {\n    console.log(\"Update user information\")\n    const updates = Object.keys(req.body)\n    const allowedUpdates = ['username', 'postcode', 'city', 'street', 'email', 'password']\n    const isValidOperation = updates.every((update) => allowedUpdates.includes(update))\n    if (!isValidOperation) {\n      return res.status(400).send({ error: 'Invalid updates!' })\n    }\n    try {\n      if (req.body.password) {\n        req.body.password = await bcrypt.hash(req.body.password, await bcrypt.genSalt(10))\n      }\n      User.updateOne({ _id: req.user._id }, await req.body, { upsert: true }, async function (err, doc) {\n        if (err) {\n          console.log(err)\n          return res.status(400).send({ error: err })\n        }\n        res.status(200).send()\n      });\n    } catch (e) {\n      res.status(400).send(e)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRoutes.html":{"url":"classes/UserRoutes.html","title":"class - UserRoutes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRoutes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/userRouter.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                router\n                            \n                            \n                                    Public\n                                userController\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                routes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/routes/userRouter.ts:9\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Router\n\n                    \n                \n                    \n                        \n                                Defined in src/routes/userRouter.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        userController\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserController\n\n                    \n                \n                \n                    \n                        Default value : new UserController()\n                    \n                \n                    \n                        \n                                Defined in src/routes/userRouter.ts:9\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        routes\n                        \n                    \n                \n            \n            \n                \nroutes()\n                \n            \n\n\n            \n                \n                    Defined in src/routes/userRouter.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Router } from \"express\";\nimport { UserController } from \"../controllers/userController\";\nimport { auth } from \"../middleware/auth\"\n\nconsole.log(\"Router\");\nexport class UserRoutes {\n\n    router: Router;\n    public userController: UserController = new UserController();\n\n    constructor() {\n        this.router = Router();\n        this.routes();\n    }\n\n    //login, register, logout own router?\n    routes() {\n        this.router.post(\"/register\", this.userController.registerUser);\n        this.router.post(\"/login\", this.userController.authenticateUser);\n        this.router.post(\"/logout\", auth, this.userController.logoutUser);\n        this.router.get(\"/user\", auth, this.userController.getUser);\n        this.router.patch(\"/user\", auth, this.userController.updateUser);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/chat/chatMessage.ts\n            \n            interface\n            ChatMessage\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/config.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config.ts\n            \n            variable\n            JWT_SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config.ts\n            \n            variable\n            MONGODB_URI\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config.ts\n            \n            variable\n            SERVER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config.ts\n            \n            variable\n            SERVER_HOSTNAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config.ts\n            \n            variable\n            SERVER_PORT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/controllers/productController.ts\n            \n            class\n            ProductController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/controllers/userController.ts\n            \n            class\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/db/mongoose.ts\n            \n            variable\n            mongo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middleware/auth.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/middleware/auth.ts\n            \n            interface\n            Request\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/middleware/auth.ts\n            \n            variable\n            auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/productModel.ts\n            \n            interface\n            IProduct\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/models/productModel.ts\n            \n            variable\n            Product\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/productModel.ts\n            \n            variable\n            productSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/userModel.ts\n            \n            interface\n            IModelUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/models/userModel.ts\n            \n            interface\n            IUser\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/models/userModel.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/userModel.ts\n            \n            variable\n            userSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/productRouter.ts\n            \n            class\n            ProductRoutes\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/routes/userRouter.ts\n            \n            class\n            UserRoutes\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/server.ts\n            \n            class\n            Server\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/server.ts\n            \n            variable\n            server\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            bcrypt : ^5.0.1\n        \n            compression : ^1.7.4\n        \n            cors : ^2.8.5\n        \n            express : ^4.17.2\n        \n            jsonwebtoken : ^8.5.1\n        \n            mongoose : ^5.11.6\n        \n            socket.io : ^4.4.1\n        \n            typescript : ^4.5.4\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ChatEvent   (src/.../constant.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/chat/constant.ts\n    \n        \n            \n                \n                    \n                        \n                        ChatEvent\n                    \n                \n                        \n                            \n                                 CONNECT\n                            \n                        \n                        \n                            \n                                Value : connection\n                            \n                        \n                        \n                            \n                                 DISCONNECT\n                            \n                        \n                        \n                            \n                                Value : disconnect\n                            \n                        \n                        \n                            \n                                 MESSAGE\n                            \n                        \n                        \n                            \n                                Value : message\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            auth   (src/.../auth.ts)\n                        \n                        \n                            config   (src/.../config.ts)\n                        \n                        \n                            JWT_SECRET   (src/.../config.ts)\n                        \n                        \n                            mongo   (src/.../mongoose.ts)\n                        \n                        \n                            MONGODB_URI   (src/.../config.ts)\n                        \n                        \n                            Product   (src/.../productModel.ts)\n                        \n                        \n                            productSchema   (src/.../productModel.ts)\n                        \n                        \n                            server   (src/.../server.ts)\n                        \n                        \n                            SERVER   (src/.../config.ts)\n                        \n                        \n                            SERVER_HOSTNAME   (src/.../config.ts)\n                        \n                        \n                            SERVER_PORT   (src/.../config.ts)\n                        \n                        \n                            User   (src/.../userModel.ts)\n                        \n                        \n                            userSchema   (src/.../userModel.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/middleware/auth.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (req: Request, res: Response, next: NextFunction) => {\n    try {\n        const header = req.header('Authorization')\n        console.log(header)\n        if (!header) {\n            throw new Error()\n        }\n        const token = header.replace('Bearer ', '');\n        // console.log(token)\n        const decoded = jwt.verify(token, config.server.jwt_secret) as JwtPayload\n        // console.log(decoded)\n        const user = await User.findOne({\n            _id: decoded._id,\n            'tokens.token': token\n        })\n        if (!user) {\n            throw new Error()\n        }\n        req.token = token;\n        req.user = user;\n        next()\n    } catch (error) {\n        res.status(401).send({\n            error: 'Please authenticate.'\n        })\n    }\n}\n                    \n                \n\n\n        \n    \n\n    src/config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    server: SERVER\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.JWT_SECRET || \"thisismysecret\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MONGODB_URI\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.MONGODB_URL || 'mongodb://127.0.0.1:27017'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SERVER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    hostname: SERVER_HOSTNAME,\n    port: SERVER_PORT,\n    mongodb_uri: MONGODB_URI,\n    jwt_secret: JWT_SECRET\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SERVER_HOSTNAME\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.SERVER_HOSTNAME || 'localhost'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SERVER_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.SERVER_PORT || 3000\n                    \n                \n\n\n        \n    \n\n    src/db/mongoose.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mongo\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {\n    if (!config.server.mongodb_uri) {\n        console.log(\"No mongo connection string. Set MONGODB_URI environment variable.\");\n        process.exit(1);\n    }\n    const connection = mongoose.connection;\n    connection.on(\"connected\", () => {\n        console.log(\"Mongo Connection Established\");\n    });\n    connection.on(\"reconnected\", () => {\n        console.log(\"Mongo Connection Reestablished\");\n    });\n    connection.on(\"disconnected\", () => {\n        console.log(\"Mongo Connection Disconnected\");\n        console.log(\"Trying to reconnect to Mongo ...\");\n        setTimeout(() => {\n            mongoose.connect(config.server.mongodb_uri, {\n                autoReconnect: false,\n                keepAlive: true,\n                useNewUrlParser: true,\n                useCreateIndex: true,\n                useUnifiedTopology: true,\n                socketTimeoutMS: 3000, \n                connectTimeoutMS: 3000\n            });\n        }, 3000);\n    });\n    connection.on(\"close\", () => {\n        console.log(\"Mongo Connection Closed\");\n    });\n    connection.on(\"error\", (error: Error) => {\n        console.log(\"Mongo Connection ERROR: \" + error);\n    });\n\n    const run = async () => {\n        try {\n            await mongoose.connect(config.server.mongodb_uri, {\n                autoReconnect: false,\n                keepAlive: true,\n                useNewUrlParser: true,\n                useUnifiedTopology: true,\n                useCreateIndex: true\n            });\n        } catch (error) {\n            console.error(error)\n        }\n    };\n    run();\n}\n                    \n                \n\n\n        \n    \n\n    src/models/productModel.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Model\n\n                    \n                \n                \n                    \n                        Default value : model(\"Product\", productSchema)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        productSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Schema\n\n                    \n                \n                \n                    \n                        Default value : new Schema({\n    productname: {\n        type: String,\n        unique: false,\n        required: true,\n        trim: true\n    },\n    price: {\n        type: Number,\n        unique: false,\n        required: true,\n    },\n    description: {\n        type: String,\n        required: true,\n        trim: true\n    },\n    image: {\n        type: Buffer\n    },\n    creator: {\n        type: Schema.Types.ObjectId,\n        required: true,\n        ref: 'User'\n    },\n    customer: {\n        type: Schema.Types.ObjectId,\n        ref: 'User'\n    }\n}, {\n    timestamps: true\n})\n                    \n                \n\n\n        \n    \n\n    src/server.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Server()\n                    \n                \n\n\n        \n    \n\n    src/models/userModel.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IModelUser\n\n                    \n                \n                \n                    \n                        Default value : model(\"User\", userSchema)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Schema\n\n                    \n                \n                \n                    \n                        Default value : new Schema({\n    username: {\n        type: String,\n        unique: false,\n        required: true,\n        trim: true\n    },\n    postcode: {\n        type: Number,\n        unique: false,\n        required: false,\n    },\n    city: {\n        type: String,\n        unique: false,\n        required: false,\n        trim: true\n    },\n    street: {\n        type: String,\n        unique: false,\n        required: false,\n        trim: true\n    },\n    role: {\n        type: String,\n        enum: ['Admin', 'Staff', 'Customer'],\n        unique: false,\n        required: true,\n    },\n    email: {\n        type: String,\n        unique: true,\n        required: true,\n        trim: true\n    },\n    password: {\n        type: String,\n        required: true,\n    },\n    tokens: [{\n        token: {\n            type: String,\n            required: true\n        }\n    }],\n}, {\n    timestamps: true\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
